//- views/householdHomework.pug
extends layout

block title
  title Household Homework | SurgeTk

block content
  script.
    window.householdId    = "#{householdId}";
    window.valueAddType   = 'HOMEWORK';
    window.iframeId       = 'homeworkIframe';
    window.snapshotSelectId = 'homeworkSnapshotSelect';
    window.generateBtnId  = 'generateHomeworkBtn';
    window.saveBtnId      = 'saveHomeworkBtn';
    window.printBtnId     = 'printHomeworkBtn';
    window.downloadBtnId  = 'downloadHomeworkBtn';
    window.emailBtnId     = 'emailHomeworkBtn';

  #alert-container
  //- .construction-banner
  //-   .construction-banner-icon-header
  //-     i.fas.fa-hammer.me-2
  //-     h2.construction-banner-title Construction in Progress
  //-   p.construction-banner-text This page is currently under construction. We appreciate your patience as we work to improve the experience. Please check back soon for updates.
  .column-layout
    .left-column
      .d-flex.align-items-center.mb-3.header-space-between
        .name-and-back
          a(href=`/households/${householdId}/value-adds`, class='me-3 text-decoration-none text-secondary backArrow')
            i.fas.fa-angle-left
          h2.householdDetailHeader #{householdName}
        .value-adds-title.dropdown
          .dropdown-toggle#valueAddDropdownTrigger
            .material-symbols-outlined.value-add-icon inventory
            h5.summary-header.mb-2.value-add-title Homework
          ul.dropdown-menu#valueAddDropdownMenu
            li.dropdown-item(data-value="buckets")
              span.check-icon
              | Buckets
            li.dropdown-item(data-value="guardrails")
              span.check-icon
              | Guardrails
            li.dropdown-item(data-value="beneficiary")
              span.check-icon
              | Beneficiary
            li.dropdown-item(data-value="net-worth")
              span.check-icon
              | Net Worth
            li.dropdown-item(data-value="homework")
              span.check-icon
              | Homework

      .page-actions-container
        .paper-container
          .iframe-wrapper(style="padding-bottom:60px;")
            // The Homework HTML is embedded here
            iframe#homeworkIframe(
              style="width: 8.5in; min-height: 11in; border: none; overflow: hidden; height: auto;",
              scrolling="no",
              onload="window.resizeIframe && window.resizeIframe(this)"
            )

    .buttons-row.mb-3.value-add-action-buttons
      select#homeworkSnapshotSelect.form-select(style="width: 200px;")
        option(value="live") Live
      button.refresh-button.btn.btn-primary#generateHomeworkBtn(type='button')
        i.fas.fa-sync.me-2
        | Refresh
      button.btn.btn-outline-secondary#saveHomeworkBtn(type='button')
        i.fas.fa-save.me-2
        | Save
      // inside .buttons-row.mb-3.value-add-action-buttons (add near other buttons)
      button.btn.btn-outline-primary#openHomeworkSettings(type='button', data-bs-toggle='modal', data-bs-target='#homeworkSettingsModal')
        i.fas.fa-sliders-h.me-2
        | Edit Fields      

      button.btn.btn-secondary#printHomeworkBtn(type='button')
        i.fas.fa-print.me-2
        | Print
      button.btn.btn-outline-secondary#downloadHomeworkBtn(type='button')
        i.fas.fa-download.me-2
        | Download
      button.btn.btn-outline-secondary.learn-more-btn(type='button' data-video-id='76979871' data-bs-toggle='modal' data-bs-target='#learnMoreVideoModal')
        i.fas.fa-play-circle.me-2
        | Learn more
      .sticky-note-wrapper
        textarea#stickyNote.sticky-note(placeholder='Add notes…')

  // modal (place near bottom of page, before "block scripts")
  #homeworkSettingsModal.modal.fade(tabindex='-1' aria-labelledby='homeworkSettingsModalLabel' aria-hidden='true')
    .modal-dialog.modal-lg
      .modal-content
        .modal-header
          h5#homeworkSettingsModalLabel.modal-title Homework Settings
          button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
        .modal-body
          form#homeworkSettingsForm
            .row.g-3
              .col-md-6
                label.form-label(for='meetingType') Meeting Type
                input#meetingType.form-control(type='text', name='meetingType', placeholder='Zoom / In‑person / Phone…')
              .col-md-6
                label.form-label(for='meetingDateTime') Meeting Date & Time
                input#meetingDateTime.form-control(type='datetime-local', name='meetingDateTime')  

            hr
            h6.mb-2.section-title Taxes
            .row.g-3
              .col-md-3
                label.form-label(for='taxYearLabel') Tax Year (auto)
                input#taxYearLabel.form-control(type='text', disabled)
              .col-md-3
                label.form-label(for='agiPY') AGI
                input#agiPY.form-control(type='number', inputmode='decimal', step='1', name='agi')
              .col-md-3
                label.form-label(for='taxableIncomePY') Taxable Income
                input#taxableIncomePY.form-control(type='number', inputmode='decimal', step='1', name='taxableIncome')
              .col-md-3
                label.form-label(for='totalTaxes') Total Taxes
                input#totalTaxes.form-control(type='number', inputmode='decimal', step='1', name='totalTaxes')
            .row.g-3.mt-0
              .col-md-3
                label.form-label(for='taxBracketPct') Marginal Tax Bracket (%)
                input#taxBracketPct.form-control(type='number', inputmode='decimal', step='0.01', name='taxBracketPct')

            hr
            h6.mb-2.section-title Cash Flow (manual)
            .row.g-3
              .col-md-6
                label.form-label(for='cfIncome') Income
                input#cfIncome.form-control(type='number', inputmode='decimal', step='1', name='cashFlow.income')
              .col-md-6
                label.form-label(for='cfSpending') Spending (monthly)
                input#cfSpending.form-control(type='number', inputmode='decimal', step='1', name='cashFlow.spending')

            hr
            .d-flex.align-items-center.justify-content-between
              h6.mb-0 Outside Investments
              button#addOutsideInvestment.btn.btn-sm.btn-outline-secondary(type='button') + Add Row
            #outsideInvList.mt-2
              // rows injected by JS  

        .modal-footer
          button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Cancel
          button#saveHomeworkSettingsBtn.btn.btn-primary(type='button')
            i.fas.fa-save.me-2
            | Save & Refresh


block scripts
  script(src='/socket.io/socket.io.js')
  script(src='/js/loading.js')
  script(src='/js/appScript.js')
  script(src='/js/valueAddScript.js') 
  script(src='/js/valueAddVideo.js')  
  script(src='/js/householdHomework.js')
  script(src='/js/actionDrawer.js')
  script(src='/js/paperScale.js')
  script.
    document.addEventListener('DOMContentLoaded', () => {
      const btn = document.getElementById('generateHomeworkBtn');
      if (btn) btn.click();
    });
    window.resizeIframe = function (obj) {
      try {
        const doc = obj.contentDocument || obj.contentWindow?.document;
        if (!doc) return;
        requestAnimationFrame(() => {
          const h = Math.max(
            doc.documentElement?.scrollHeight || 0,
            doc.body?.scrollHeight || 0
          );
          obj.style.height = h + 'px';
        });
      } catch (e) {
        console.warn('resizeIframe failed:', e);
      }
    };
    document.getElementById('printHomeworkBtn')?.addEventListener('click', () => {
      const iframe = document.getElementById('homeworkIframe');
      iframe.contentWindow.focus();
      iframe.contentWindow.print();
    });

    // --- Homework Settings modal JS ---
    (function () {
      const householdId = window.householdId;
      const generateBtn = document.getElementById(window.generateBtnId || 'generateHomeworkBtn');

      // Elements
      const modalEl   = document.getElementById('homeworkSettingsModal');
      const form      = document.getElementById('homeworkSettingsForm');
      const outsideEl = document.getElementById('outsideInvList');

      // Load settings when the modal opens
      if (modalEl) {
        modalEl.addEventListener('show.bs.modal', () => loadHomeworkSettings());
      }

      // ----- Row helpers (Outside Investments only) -----
      function outsideRowTemplate(i, label = '', amount = 0) {
        return `
          <div class="row g-2 align-items-center outside-row" data-index="${i}">
            <div class="col-7">
              <input class="form-control" placeholder="Label" name="outsideInvestments[${i}].label" value="${label || ''}">
            </div>
            <div class="col-4">
              <input class="form-control" type="number" step="1" name="outsideInvestments[${i}].amount" value="${Number(amount) || 0}">
            </div>
            <div class="col-1 text-end">
              <button type="button" class="btn btn-link text-danger p-0 remove-row" title="Remove">
                <i class="fas fa-times"></i>
              </button>
            </div>
          </div>
        `;
      }

      function ensureAtLeastOneOutsideRow() {
        if (!outsideEl.querySelector('.outside-row')) {
          outsideEl.insertAdjacentHTML('beforeend', outsideRowTemplate(0, '', 0));
        }
      }

      function reindexOutsideRows() {
        const rows = outsideEl.querySelectorAll('.outside-row');
        rows.forEach((row, i) => {
          row.dataset.index = i;
          row.querySelectorAll('input').forEach(input => {
            if (input.name.endsWith('.label'))  input.name = `outsideInvestments[${i}].label`;
            if (input.name.endsWith('.amount')) input.name = `outsideInvestments[${i}].amount`;
          });
        });
      }

      function collectOutsideRows() {
        return Array.from(outsideEl.querySelectorAll('.outside-row')).map(row => {
          const label = row.querySelector('input[name$=".label"]')?.value ?? '';
          const amt   = Number(row.querySelector('input[name$=".amount"]')?.value || 0);
          return { label: label.trim(), amount: amt };
        }).filter(r => r.label || r.amount);
      }

      // Add / Remove
      document.getElementById('addOutsideInvestment')?.addEventListener('click', () => {
        const next = outsideEl.querySelectorAll('.outside-row').length;
        outsideEl.insertAdjacentHTML('beforeend', outsideRowTemplate(next, '', 0));
        reindexOutsideRows();
      });

      outsideEl?.addEventListener('click', (e) => {
        const btn = e.target.closest('.remove-row');
        if (!btn) return;
        btn.closest('.outside-row')?.remove();
        reindexOutsideRows();
        ensureAtLeastOneOutsideRow();
      });

      // ----- Load settings from API -----
      async function loadHomeworkSettings() {
        try {
          // Backend will return { settings, household } (see backend step below).
          const r = await fetch(`/api/value-add/${encodeURIComponent(householdId)}/homework-settings`);
          if (!r.ok) throw new Error(`HTTP ${r.status}`);
          const payload = await r.json();
          const s  = payload?.settings ?? payload;           // tolerate old shape
          const hh = payload?.household ?? {};               // { marginalTaxBracket }

          const setVal = (name, val) => {
            const el = form.querySelector(`[name="${name}"]`);
            if (el) el.value = (val ?? '');
          };

          // auto Tax Year (display only)
          const autoYear = new Date().getFullYear() - 1;
          const tyEl = document.getElementById('taxYearLabel');
          if (tyEl) tyEl.value = String(autoYear);

          // meeting
          setVal('meetingType', s.meetingType);
          if (s.meetingDateTime) {
            const dt = new Date(s.meetingDateTime);
            const local = new Date(dt.getTime() - dt.getTimezoneOffset() * 60000)
              .toISOString()
              .slice(0, 16);
            setVal('meetingDateTime', local);
          } else {
            setVal('meetingDateTime', '');
          }

          // Cash Flow (manual only)
          setVal('cashFlow.income',   s.cashFlow?.income);
          setVal('cashFlow.spending', s.cashFlow?.spending);

          // Taxes (manual)
          setVal('agi',            s.agi);
          setVal('taxableIncome',  s.taxableIncome);
          setVal('totalTaxes',     s.totalTaxes);

          // Tax Bracket: prefer settings, else household.marginalTaxBracket
          const bracket = (s.taxBracketPct != null) ? s.taxBracketPct
                        : (hh.marginalTaxBracket != null ? hh.marginalTaxBracket : '');
          setVal('taxBracketPct', bracket);

          // Outside Investments
          outsideEl.innerHTML = '';
          (s.outsideInvestments || []).forEach((row, i) => {
            outsideEl.insertAdjacentHTML('beforeend', outsideRowTemplate(i, row.label || '', row.amount || 0));
          });
          ensureAtLeastOneOutsideRow();

        } catch (e) {
          console.error('loadHomeworkSettings failed', e);
        }
      }

      // ----- Gather & Save -----
      const toNumOrNull = (sel) => {
        const raw = form.querySelector(sel)?.value;
        if (raw == null || raw === '') return null;
        const n = Number(raw);
        return Number.isFinite(n) ? n : null;
      };
      const getStr = (sel) => form.querySelector(sel)?.value || '';

      function gatherForm() {
        // bracket: keep null if blank so backend knows “no manual value”
        const bracketRaw = form.querySelector('[name="taxBracketPct"]')?.value;
        const bracketPct = (bracketRaw === '' || bracketRaw == null) ? null : Number(bracketRaw);

        return {
          meetingType:     getStr('[name="meetingType"]'),
          meetingDateTime: getStr('[name="meetingDateTime"]'),

          // manual cash flow
          cashFlow: {
            income:   toNumOrNull('[name="cashFlow.income"]'),
            spending: toNumOrNull('[name="cashFlow.spending"]')
          },

          // manual tax fields (top-level in HomeworkSettings)
          agi:            toNumOrNull('[name="agi"]'),
          taxableIncome:  toNumOrNull('[name="taxableIncome"]'),
          totalTaxes:     toNumOrNull('[name="totalTaxes"]'),
          taxBracketPct:  bracketPct,

          // manual outside investments
          outsideInvestments: collectOutsideRows()
        };
      }

      document.getElementById('saveHomeworkSettingsBtn')?.addEventListener('click', async () => {
        try {
          const payload = gatherForm();
          const res = await fetch(`/api/value-add/${encodeURIComponent(householdId)}/homework-settings`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
          if (!res.ok) throw new Error(`HTTP ${res.status}`);

          // Refresh worksheet
          generateBtn?.click();

          // Close modal
          const modal = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
          modal.hide();
        } catch (e) {
          console.error('saveHomeworkSettings failed', e);
          alert('Could not save settings. Please try again.');
        }
      });
    })();
